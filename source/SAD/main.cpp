#include <iostream>
#include <fstream>
#include <sstream>
#include <CL/cl.h>
#include <vector>
#include <string>
#include <bits/c++config.h>

#define NUM_BUFFER_ELEMENTS 4096

/*This code was modified of example Hello world of OpenCL Programming Guide book*/

void showResults (cl_uint array[], const char name[], int size)  
{
    printf("Result size: %s \n", name); 
       
    for(int i=0;i<size;i++)
    {
        printf("pos: %d - sum: %d \n", i, array[i]);
    }
}

inline void 
checkErr(cl_int err, const char * name)
{
    if (err != CL_SUCCESS) {
         fprintf(stderr, "ERROR: %s ( %d )",name, err );
        //exit(EXIT_FAILURE);
    }
}

void CL_CALLBACK contextCallback(
	const char * errInfo,
	const void * private_info,
	size_t cb,
	void * user_data)
{
	std::cout << "Error occured during context use: " << errInfo << std::endl;
	// should really perform any clearup and so on at this point
	// but for simplicitly just exit.
	exit(1);
}

int main(){
    
    cl_int errNum;
    cl_uint numPlatforms;
    cl_uint numDevices;
    cl_platform_id * platformIDs;
    cl_device_id * deviceIDs;
    cl_context context = NULL;
    cl_command_queue queue;
    cl_program program;
    cl_kernel kernel;
    std::size_t paramValueSize;
    cl_int deviceID = 0;
    cl_mem blockPixelBuffer;
    cl_mem areaPixelBuffer;
   /* cl_mem sadHBuffer;
    cl_mem sadVBuffer;
    cl_mem sadAMP;*/
    
     
    cl_mem sad8x8Buffer;
    cl_mem sad8x4Buffer;
    cl_mem sad4x8Buffer;              
    cl_mem sad16x16Buffer;
    cl_mem sad16x8Buffer;
    cl_mem sad8x16Buffer;
    cl_mem sad16x4UBuffer;
    cl_mem sad16x4DBuffer;
    cl_mem sad16x12UBuffer;
    cl_mem sad16x12DBuffer;
    cl_mem sad4x16LBuffer;     
    cl_mem sad4x16RBuffer;
    cl_mem sad12x16LBuffer;
    cl_mem sad12x16RBuffer;
    cl_mem sad32x32Buffer;
    cl_mem sad32x16Buffer;
    cl_mem sad16x32Buffer;
    cl_mem sad32x8UBuffer;
    cl_mem sad32x8DBuffer;
    cl_mem sad32x24UBuffer;
    cl_mem sad32x24DBuffer;
    cl_mem sad8x32LBuffer;
    cl_mem sad8x32RBuffer;
    cl_mem sad24x32LBuffer;
    cl_mem sad24x32RBuffer;
    cl_mem sad64x64Buffer;
    cl_mem sad64x32Buffer;
    cl_mem sad32x64Buffer;
    cl_mem sad64x16UBuffer;
    cl_mem sad64x16DBuffer;
    cl_mem sad64x48UBuffer;
    cl_mem sad64x48DBuffer;
    cl_mem sad16x64LBuffer;
    cl_mem sad16x64RBuffer;
    cl_mem sad48x64LBuffer;
    cl_mem sad48x64RBuffer;
    
    cl_uint subBlockWidth = 4;
    cl_uint CTUWidth = 64;
    cl_uint numCTU = 2;
    cl_short CtuSize = 64;
    cl_short stride = 0;
    
    cl_uint sad8x8      [64];
    cl_uint sad8x4      [128];
    cl_uint sad4x8      [128];              
    cl_uint sad16x16    [16];
    cl_uint sad16x8     [32];
    cl_uint sad8x16     [32];
    cl_uint sad16x4U    [16];
    cl_uint sad16x4D    [16];
    cl_uint sad16x12U   [16];
    cl_uint sad16x12D   [16];
    cl_uint sad4x16L    [16];     
    cl_uint sad4x16R    [16];
    cl_uint sad12x16L   [16];
    cl_uint sad12x16R   [16];
    cl_uint sad32x32    [4];
    cl_uint sad32x16    [8];
    cl_uint sad16x32    [8];
    cl_uint sad32x8U    [4];
    cl_uint sad32x8D    [4];
    cl_uint sad32x24U   [4];
    cl_uint sad32x24D   [4];
    cl_uint sad8x32L    [4];
    cl_uint sad8x32R    [4];
    cl_uint sad24x32L   [4];
    cl_uint sad24x32R   [4];
    cl_uint sad64x64    [1];
    cl_uint sad64x32    [2];
    cl_uint sad32x64    [2];
    cl_uint sad64x16U   [1];
    cl_uint sad64x16D   [1];
    cl_uint sad64x48U   [1];
    cl_uint sad64x48D   [1];
    cl_uint sad16x64L   [1];
    cl_uint sad16x64R   [1];
    cl_uint sad48x64L   [1];
    cl_uint sad48x64R   [1];
    
    //cl_uint result[256];
            
    cl_short block[] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};
    
    cl_short area[] = { 3,9,5,2,4,6,7,13,10,18,20,16,15,11,19,1,8,12,14,17,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
                     16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
                     16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,7,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,17,18,19,20,1,2,3,4,5,6,4,15,16,17,18,19,7,8,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,14,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,11,12,13,14,15,16,17,18,14,14,26,
                     15,16,17,18,19,20,1,2,3,4,1,2,3,4,5,6,7,8,9,10,11,12,13,14,5,612,13,14,15,16,17,18,19,7,8,20,1,2,3,4,5,
                     6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,
                     7,8,9,10,9,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,14,5,6,7,8,9,10,11,7,18,19,20,1,2,3,4,5,6,7,8,9,
                     11,12,13,14,15,16,17,18,19,20,1,17,18,19,20,1,2,3,4,5,6,4,15,16,17,18,19,7,8,20,1,2,3,4,5,6,7,8,9,10,11,           
                     12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,
                     3,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,14,5,6,7,8,9,10,11,12,6,7,8,9,10,11,12,13,20,14,13,8,6,7,19,
                     3,9,5,2,4,6,7,13,10,18,20,16,15,11,19,1,8,12,14,17,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
                     16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
                     16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,7,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,17,18,19,20,1,2,3,4,5,6,4,15,16,17,18,19,7,8,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,14,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,11,12,13,14,15,16,17,18,14,14,26,
                     15,16,17,18,19,20,1,2,3,4,1,2,3,4,5,6,7,8,9,10,11,12,13,14,5,612,13,14,15,16,17,18,19,7,8,20,1,2,3,4,5,
                     6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,
                     7,8,9,10,9,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,14,5,6,7,8,9,10,11,7,18,19,20,1,2,3,4,5,6,7,8,9,
                     11,12,13,14,15,16,17,18,19,20,1,17,18,19,20,1,2,3,4,5,6,4,15,16,17,18,19,7,8,20,1,2,3,4,5,6,7,8,9,10,11,           
                     12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,
                     3,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,14,5,6,7,8,9,10,11,12,6,7,8,9,10,11,12,13,20,14,13,8,6,7,19,
                     3,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,14,5,6,7,8,9,10,11,12,6,7,8,9,10,11,12,13,20,14,13,8,6,7,19,
                     3,9,5,2,4,6,7,13,10,18,20,16,15,11,19,1,8,12,14,17,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
                     16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
                     16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,7,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,17,18,19,20,1,2,3,4,5,6,4,15,16,17,18,19,7,8,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,14,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,11,12,13,14,15,16,17,18,14,14,26,
                     15,16,17,18,19,20,1,2,3,4,1,2,3,4,5,6,7,8,9,10,11,12,13,14,5,612,13,14,15,16,17,18,19,7,8,20,1,2,3,4,5,
                     6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,
                     7,8,9,10,9,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,14,5,6,7,8,9,10,11,7,18,19,20,1,2,3,4,5,6,7,8,9,
                     3,9,5,2,4,6,7,13,10,18,20,16,15,11,19,1,8,12,14,17,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
                     16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
                     16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,7,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,17,18,19,20,1,2,3,4,5,6,4,15,16,17,18,19,7,8,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,14,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,11,12,13,14,15,16,17,18,14,14,26,
                     15,16,17,18,19,20,1,2,3,4,1,2,3,4,5,6,7,8,9,10,11,12,13,14,5,612,13,14,15,16,17,18,19,7,8,20,1,2,3,4,5,
                     6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,
                     7,8,9,10,9,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,14,5,6,7,8,9,10,11,7,18,19,20,1,2,3,4,5,6,7,8,9,
                     11,12,13,14,15,16,17,18,19,20,1,17,18,19,20,1,2,3,4,5,6,4,15,16,17,18,19,7,8,20,1,2,3,4,5,6,7,8,9,10,11,           
                     12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,
                     3,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,14,5,6,7,8,9,10,11,12,6,7,8,9,10,11,12,13,20,14,13,8,6,7,19,
                     3,9,5,2,4,6,7,13,10,18,20,16,15,11,19,1,8,12,14,17,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
                     16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
                     16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,7,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,17,18,19,20,1,2,3,4,5,6,4,15,16,17,18,19,7,8,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,14,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,11,12,13,14,15,16,17,18,14,14,26,
                     15,16,17,18,19,20,1,2,3,4,1,2,3,4,5,6,7,8,9,10,11,12,13,14,5,612,13,14,15,16,17,18,19,7,8,20,1,2,3,4,5,
                     6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,
                     7,8,9,10,9,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,14,5,6,7,8,9,10,11,7,18,19,20,1,2,3,4,5,6,7,8,9,
                     11,12,13,14,15,16,17,18,19,20,1,17,18,19,20,1,2,3,4,5,6,4,15,16,17,18,19,7,8,20,1,2,3,4,5,6,7,8,9,10,11,           
                     12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,
                     3,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,14,5,6,7,8,9,10,11,12,6,7,8,9,10,11,12,13,20,14,13,8,6,7,19,
                     3,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,14,5,6,7,8,9,10,11,12,6,7,8,9,10,11,12,13,20,14,13,8,6,7,19,
                     3,9,5,2,4,6,7,13,10,18,20,16,15,11,19,1,8,12,14,17,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
                     16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
                     16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,7,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,17,18,19,20,1,2,3,4,5,6,4,15,16,17,18,19,7,8,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,14,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,11,12,13,14,15,16,17,18,14,14,26,
                     15,16,17,18,19,20,1,2,3,4,1,2,3,4,5,6,7,8,9,10,11,12,13,14,5,612,13,14,15,16,17,18,19,7,8,20,1,2,3,4,5,
                     6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,
                     7,8,9,10,9,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,14,5,6,7,8,9,10,11,7,18,19,20,1,2,3,4,5,6,7,8,9,
                     3,9,5,2,4,6,7,13,10,18,20,16,15,11,19,1,8,12,14,17,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
                     16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
                     16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,7,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,17,18,19,20,1,2,3,4,5,6,4,15,16,17,18,19,7,8,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,14,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,11,12,13,14,15,16,17,18,14,14,26,
                     15,16,17,18,19,20,1,2,3,4,1,2,3,4,5,6,7,8,9,10,11,12,13,14,5,612,13,14,15,16,17,18,19,7,8,20,1,2,3,4,5,
                     6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,
                     7,8,9,10,9,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,14,5,6,7,8,9,10,11,7,18,19,20,1,2,3,4,5,6,7,8,9,
                     11,12,13,14,15,16,17,18,19,20,1,17,18,19,20,1,2,3,4,5,6,4,15,16,17,18,19,7,8,20,1,2,3,4,5,6,7,8,9,10,11,           
                     12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,
                     3,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,14,5,6,7,8,9,10,11,12,6,7,8,9,10,11,12,13,20,14,13,8,6,7,19,
                     3,9,5,2,4,6,7,13,10,18,20,16,15,11,19,1,8,12,14,17,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
                     16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
                     16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,7,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,17,18,19,20,1,2,3,4,5,6,4,15,16,17,18,19,7,8,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,14,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,11,12,13,14,15,16,17,18,14,14,26,
                     15,16,17,18,19,20,1,2,3,4,1,2,3,4,5,6,7,8,9,10,11,12,13,14,5,612,13,14,15,16,17,18,19,7,8,20,1,2,3,4,5,
                     6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,
                     7,8,9,10,9,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,14,5,6,7,8,9,10,11,7,18,19,20,1,2,3,4,5,6,7,8,9,
                     11,12,13,14,15,16,17,18,19,20,1,17,18,19,20,1,2,3,4,5,6,4,15,16,17,18,19,7,8,20,1,2,3,4,5,6,7,8,9,10,11,           
                     12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,
                     3,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,14,5,6,7,8,9,10,11,12,6,7,8,9,10,11,12,13,20,14,13,8,6,7,19,
                     3,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,14,5,6,7,8,9,10,11,12,6,7,8,9,10,11,12,13,20,14,13,8,6,7,19,
                     3,9,5,2,4,6,7,13,10,18,20,16,15,11,19,1,8,12,14,17,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
                     16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
                     16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,7,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,17,18,19,20,1,2,3,4,5,6,4,15,16,17,18,19,7,8,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                     1,2,3,4,5,6,7,8,9,10,14,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,11,12,13,14,15,16,17,18,14,14,26,
                     15,16,17,18,19,20,1,2,3,4,1,2,3,4,5,6,7,8,9,10,11,12,13,14,5,612,13,14,15,16,17,18,19,7,8,20,1,2,3,4,5,
                     6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,11,12,13,
                     14,15,16,17,18,14,14,14,15,16,17,18};
   
    
    
    
      
    // First, select an OpenCL platform to run on.  
    errNum = clGetPlatformIDs(0, NULL, &numPlatforms);
    checkErr((errNum != CL_SUCCESS) ? errNum : (numPlatforms <= 0 ? -1 : CL_SUCCESS),"No Platforms Found"); 
 
    platformIDs = (cl_platform_id *)alloca(sizeof(cl_platform_id) * numPlatforms);

    errNum = clGetPlatformIDs(numPlatforms, platformIDs, NULL);
    checkErr((errNum != CL_SUCCESS) ? errNum : (numPlatforms <= 0 ? -1 : CL_SUCCESS), "cNo Platforms Found");

    // Iterate through the list of platforms until we find one that supports
    // a GPU device, otherwise fail with an error.
    deviceIDs = NULL;
    cl_uint i;
    for (i = 0; i < numPlatforms; i++)
    {
        //Find devices only
	errNum = clGetDeviceIDs(platformIDs[i], CL_DEVICE_TYPE_ALL, 0, NULL, &numDevices);
	if (errNum != CL_SUCCESS && errNum != CL_DEVICE_NOT_FOUND)
	{
            checkErr(errNum, "No devices Found");
        }
        
        //Construct a vector with devices found
	else if (numDevices > 0) 
	{
            deviceIDs = (cl_device_id *)alloca(sizeof(cl_device_id) * numDevices);
            errNum = clGetDeviceIDs(platformIDs[i], CL_DEVICE_TYPE_ALL, numDevices, &deviceIDs[0], NULL);
            checkErr(errNum, "No devices found");
            break;
        }
    }
    
    //if not found device display error
    if (deviceIDs == NULL) 
    {
	std::cout << "No GPU device found" << std::endl;
	exit(-1);
    }
    
    std::cout << numDevices << " Devices Found" << std::endl;
    //Obtain device vendor name to display info   
    errNum = clGetDeviceInfo(deviceIDs[deviceID], CL_DEVICE_VENDOR, 0, NULL, &paramValueSize);
    if (errNum != CL_SUCCESS)
    {
	std::cerr << "Failed to find OpenCL device info " << std::endl;
	return 0;
    }

    char * info = (char *)alloca(sizeof(char) * paramValueSize);  // String to display vendor name info
    errNum = clGetDeviceInfo(deviceIDs[deviceID], CL_DEVICE_VENDOR, paramValueSize, info, NULL);
    if(errNum != CL_SUCCESS)
    {
	std::cerr << "Failed to find OpenCL device info" << std::endl;
	return 0;
    }    
    
    //display info
    //std::cout << "Using GPU device: " << info << std::endl; 
    printf("Using GPU device %d : %s \n", deviceID, info);
    
    //create context
    cl_context_properties contextProperties[] = {CL_CONTEXT_PLATFORM, (cl_context_properties)platformIDs[i],0 };
    context = clCreateContext(contextProperties, numDevices, deviceIDs, &contextCallback, NULL, &errNum);
    checkErr(errNum, "clCreateContext");

    //read external kernel
    std::ifstream srcFile("sad.cl");
    checkErr(srcFile.is_open() ? CL_SUCCESS : -1, "reading sad.cl"); 
    
    //create string with external kernel
    std::string srcProg(std::istreambuf_iterator<char>(srcFile),(std::istreambuf_iterator<char>()));

    //pass string kernel to array char 
    const char * src = srcProg.c_str();
    size_t length = srcProg.length();

    // Create program from source
    program = clCreateProgramWithSource(context, 1, &src, &length, &errNum);
    checkErr(errNum, "clCreateProgramWithSource");

    // Build program
    errNum = clBuildProgram(program, numDevices, deviceIDs, NULL, NULL, NULL);
    if (errNum != CL_SUCCESS)
    {
        // Determine the reason for the error
        char buildLog[16384];
        size_t length;
        clGetProgramBuildInfo( program, deviceIDs[deviceID], CL_PROGRAM_BUILD_LOG, sizeof(buildLog), buildLog,	&length);

        std::cerr << "Error in kernel: " << std::endl;
        std::cerr << buildLog;	checkErr(errNum, "clBuildProgram");
    }
    
    // Create kernel object
    kernel = clCreateKernel(program, "calcSAD", &errNum);
    checkErr(errNum, "clCreateKernel");
    
    //create Buffers for calculate 4x4 blocks sad 
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------   
    //buffer block_pixel
    blockPixelBuffer = clCreateBuffer(context, CL_MEM_READ_ONLY | CL_MEM_COPY_HOST_PTR, sizeof(short) * NUM_BUFFER_ELEMENTS, static_cast<void *>(block), &errNum);
    checkErr(errNum, "clCreateBuffer(blockPixelBuffer)"); 
        
    //search area buffer
    areaPixelBuffer = clCreateBuffer(context, CL_MEM_READ_ONLY | CL_MEM_COPY_HOST_PTR, sizeof(short) * NUM_BUFFER_ELEMENTS, static_cast<void *>(area), &errNum);
    checkErr(errNum, "clCreateBuffer(areaPixelBuffer)");
   
   
//-----------------------------------------------------------------------------------------------------------------------------------------------------   
    
    //sad of sub blocks buffers 
//------------------------------------------------------------------------------------------------------------------------
     sad8x8Buffer = clCreateBuffer(context, CL_MEM_WRITE_ONLY, sizeof(cl_uint) * 64, NULL, &errNum);
    checkErr(errNum, "clCreateBuffer(8x8Buffer)");
    
    sad8x4Buffer = clCreateBuffer(context, CL_MEM_WRITE_ONLY, sizeof(cl_uint) * 128, NULL, &errNum);
    checkErr(errNum, "clCreateBuffer(8x4Buffer)");
    
    sad4x8Buffer = clCreateBuffer(context, CL_MEM_WRITE_ONLY, sizeof(cl_uint) * 128, NULL, &errNum);
    checkErr(errNum, "clCreateBuffer(4x8Buffer)");
    
    sad16x16Buffer = clCreateBuffer(context, CL_MEM_WRITE_ONLY, sizeof(cl_uint) * 16, NULL, &errNum);
    checkErr(errNum, "clCreateBuffer(16x16Buffer)");
    
    sad16x8Buffer = clCreateBuffer(context, CL_MEM_WRITE_ONLY, sizeof(cl_uint) * 32, NULL, &errNum);
    checkErr(errNum, "clCreateBuffer(16x8Buffer)");
    
    sad8x16Buffer = clCreateBuffer(context, CL_MEM_WRITE_ONLY, sizeof(cl_uint) * 32, NULL, &errNum);
    checkErr(errNum, "clCreateBuffer(8x16Buffer)");
    
    sad16x4UBuffer = clCreateBuffer(context, CL_MEM_WRITE_ONLY, sizeof(cl_uint) * 16, NULL, &errNum);
    checkErr(errNum, "clCreateBuffer(16x4UBuffer)");
    
    sad16x4DBuffer = clCreateBuffer(context, CL_MEM_WRITE_ONLY, sizeof(cl_uint) * 16, NULL, &errNum);
    checkErr(errNum, "clCreateBuffer(16x4DBuffer)");
    
    sad16x12UBuffer = clCreateBuffer(context, CL_MEM_WRITE_ONLY, sizeof(cl_uint) * 16, NULL, &errNum);
    checkErr(errNum, "clCreateBuffer(16x12UBuffer)");
    
    sad16x12DBuffer = clCreateBuffer(context, CL_MEM_WRITE_ONLY, sizeof(cl_uint) * 16, NULL, &errNum);
    checkErr(errNum, "clCreateBuffer(16x12DBuffer)");
    
    sad4x16LBuffer = clCreateBuffer(context, CL_MEM_WRITE_ONLY, sizeof(cl_uint) * 16, NULL, &errNum);
    checkErr(errNum, "clCreateBuffer(4x16LBuffer)");
    
    sad4x16RBuffer = clCreateBuffer(context, CL_MEM_WRITE_ONLY, sizeof(cl_uint) * 16, NULL, &errNum);
    checkErr(errNum, "clCreateBuffer(4x16RBuffer)");
    
    sad12x16LBuffer = clCreateBuffer(context, CL_MEM_WRITE_ONLY, sizeof(cl_uint) * 16, NULL, &errNum);
    checkErr(errNum, "clCreateBuffer(12x16LBuffer)");
    
    sad12x16RBuffer = clCreateBuffer(context, CL_MEM_WRITE_ONLY, sizeof(cl_uint) * 16, NULL, &errNum);
    checkErr(errNum, "clCreateBuffer(12x16RBuffer)");
    
    sad32x32Buffer = clCreateBuffer(context, CL_MEM_WRITE_ONLY, sizeof(cl_uint) * 4, NULL, &errNum);
    checkErr(errNum, "clCreateBuffer(32x32Buffer)");
    
    sad32x16Buffer = clCreateBuffer(context, CL_MEM_WRITE_ONLY, sizeof(cl_uint) * 8, NULL, &errNum);
    checkErr(errNum, "clCreateBuffer(32x16Buffer)");
    
    sad16x32Buffer = clCreateBuffer(context, CL_MEM_WRITE_ONLY, sizeof(cl_uint) * 8,NULL, &errNum);
    checkErr(errNum, "clCreateBuffer(16x32Buffer)");
    
    sad32x8UBuffer = clCreateBuffer(context, CL_MEM_WRITE_ONLY, sizeof(cl_uint) * 4, NULL, &errNum);
    checkErr(errNum, "clCreateBuffer(32x8UBuffer)");
    
    sad32x8DBuffer = clCreateBuffer(context, CL_MEM_WRITE_ONLY, sizeof(cl_uint) * 4, NULL, &errNum);
    checkErr(errNum, "clCreateBuffer(32x8DBuffer)");
    
    sad32x24UBuffer = clCreateBuffer(context, CL_MEM_WRITE_ONLY, sizeof(cl_uint) * 4, NULL, &errNum);
    checkErr(errNum, "clCreateBuffer(32x24UBuffer)");
    
    sad32x24DBuffer = clCreateBuffer(context, CL_MEM_WRITE_ONLY, sizeof(cl_uint) * 8, NULL, &errNum);
    checkErr(errNum, "clCreateBuffer(32x24DBuffer)");
    
    sad8x32LBuffer = clCreateBuffer(context, CL_MEM_WRITE_ONLY, sizeof(cl_uint) * 4, NULL, &errNum);
    checkErr(errNum, "clCreateBuffer(8x32LBuffer)");
    
    sad8x32RBuffer = clCreateBuffer(context, CL_MEM_WRITE_ONLY, sizeof(cl_uint) * 4, NULL, &errNum);
    checkErr(errNum, "clCreateBuffer(8x32RBuffer)");
    
    sad24x32LBuffer = clCreateBuffer(context, CL_MEM_WRITE_ONLY, sizeof(cl_uint) * 4, NULL, &errNum);
    checkErr(errNum, "clCreateBuffer(34x32LBuffer)");
    
    sad24x32RBuffer = clCreateBuffer(context, CL_MEM_WRITE_ONLY, sizeof(cl_uint) * 8, NULL, &errNum);
    checkErr(errNum, "clCreateBuffer(24x32RBuffer)");
    
    sad64x64Buffer = clCreateBuffer(context, CL_MEM_WRITE_ONLY, sizeof(cl_uint), NULL, &errNum);
    checkErr(errNum, "clCreateBuffer(64x64Buffer)");
    
    sad64x32Buffer = clCreateBuffer(context, CL_MEM_WRITE_ONLY, sizeof(cl_uint) * 2, NULL, &errNum);
    checkErr(errNum, "clCreateBuffer(64x32Buffer)");
    
    sad32x64Buffer = clCreateBuffer(context, CL_MEM_WRITE_ONLY, sizeof(cl_uint) * 2, NULL, &errNum);
    checkErr(errNum, "clCreateBuffer(32x64Buffer)");
    
    sad64x16UBuffer = clCreateBuffer(context, CL_MEM_WRITE_ONLY, sizeof(cl_uint),NULL, &errNum);
    checkErr(errNum, "clCreateBuffer(64x16UBuffer)");
    
    sad64x16DBuffer = clCreateBuffer(context, CL_MEM_WRITE_ONLY, sizeof(cl_uint), NULL, &errNum);
    checkErr(errNum, "clCreateBuffer(64x16DBuffer)");
    
    sad64x48UBuffer = clCreateBuffer(context, CL_MEM_WRITE_ONLY, sizeof(cl_uint), NULL, &errNum);
    checkErr(errNum, "clCreateBuffer(64x48UBuffer)");
    
    sad64x48DBuffer = clCreateBuffer(context, CL_MEM_WRITE_ONLY, sizeof(cl_uint), NULL, &errNum);
    checkErr(errNum, "clCreateBuffer(64x48DBuffer)");
    
    sad16x64LBuffer = clCreateBuffer(context, CL_MEM_WRITE_ONLY, sizeof(cl_uint), NULL, &errNum);
    checkErr(errNum, "clCreateBuffer(16x64LBuffer)");
    
    sad16x64RBuffer = clCreateBuffer(context, CL_MEM_WRITE_ONLY, sizeof(cl_uint), NULL, &errNum);
    checkErr(errNum, "clCreateBuffer(16x64RBuffer)");
    
    sad48x64LBuffer = clCreateBuffer(context, CL_MEM_WRITE_ONLY, sizeof(cl_uint), NULL, &errNum);
    checkErr(errNum, "clCreateBuffer(14x64LBuffer)");
    
    sad48x64RBuffer = clCreateBuffer(context, CL_MEM_WRITE_ONLY, sizeof(cl_uint), NULL, &errNum);
    checkErr(errNum, "clCreateBuffer(48x64RBuffer)");
    
    
 //------------------------------------------------------------------------------------------------------------------------
    
    //Create a Command Queue to run kernels in the device
    queue = clCreateCommandQueue(context,deviceIDs[deviceID], 0, &errNum);
    checkErr(errNum, "clCreateCommandQueue");
    
        
    //Set Arguments to Kernel that calculate recursive sad
//------------------------------------------------------------------------------------------------------------------------
    
    errNum  = clSetKernelArg(kernel, 0, sizeof(cl_mem), &blockPixelBuffer);
    errNum |= clSetKernelArg(kernel, 1, sizeof(cl_mem), &areaPixelBuffer);
   errNum |= clSetKernelArg(kernel, 2, 256 * sizeof(cl_uint), NULL);
    errNum |= clSetKernelArg(kernel, 3, 256 * sizeof(cl_uint), NULL);
    errNum |= clSetKernelArg(kernel, 4, 128 * sizeof(cl_uint), NULL);
    errNum |= clSetKernelArg(kernel, 5, sizeof(cl_short), &CtuSize);
    errNum |= clSetKernelArg(kernel, 6, sizeof(cl_short), &stride);
    errNum |= clSetKernelArg(kernel, 7, sizeof(cl_mem), &sad8x8Buffer);
    errNum |= clSetKernelArg(kernel, 8, sizeof(cl_mem), &sad8x4Buffer);
    errNum |= clSetKernelArg(kernel, 9, sizeof(cl_mem), &sad4x8Buffer);
    errNum |= clSetKernelArg(kernel, 10, sizeof(cl_mem), &sad16x16Buffer);
    errNum |= clSetKernelArg(kernel, 11, sizeof(cl_mem), &sad16x8Buffer);
    errNum |= clSetKernelArg(kernel, 12, sizeof(cl_mem), &sad8x16Buffer);
    errNum |= clSetKernelArg(kernel, 13, sizeof(cl_mem), &sad16x4UBuffer);
    errNum |= clSetKernelArg(kernel, 14, sizeof(cl_mem), &sad16x4DBuffer);
    errNum |= clSetKernelArg(kernel, 15, sizeof(cl_mem), &sad16x12UBuffer);
    errNum |= clSetKernelArg(kernel, 16, sizeof(cl_mem), &sad16x12DBuffer);
    errNum |= clSetKernelArg(kernel, 17, sizeof(cl_mem), &sad4x16LBuffer);
    errNum |= clSetKernelArg(kernel, 18, sizeof(cl_mem), &sad4x16RBuffer);
    errNum |= clSetKernelArg(kernel, 19, sizeof(cl_mem), &sad12x16LBuffer);
    errNum |= clSetKernelArg(kernel, 20, sizeof(cl_mem), &sad12x16RBuffer);
    errNum |= clSetKernelArg(kernel, 21, sizeof(cl_mem), &sad32x32Buffer);
    errNum |= clSetKernelArg(kernel, 22, sizeof(cl_mem), &sad32x16Buffer);
    errNum |= clSetKernelArg(kernel, 23, sizeof(cl_mem), &sad16x32Buffer);
    errNum |= clSetKernelArg(kernel, 24, sizeof(cl_mem), &sad32x8UBuffer);
    errNum |= clSetKernelArg(kernel, 25, sizeof(cl_mem), &sad32x8DBuffer);
    errNum |= clSetKernelArg(kernel, 26, sizeof(cl_mem), &sad32x24UBuffer);
    errNum |= clSetKernelArg(kernel, 27, sizeof(cl_mem), &sad32x24DBuffer);
    errNum |= clSetKernelArg(kernel, 28, sizeof(cl_mem), &sad8x32LBuffer);
    errNum |= clSetKernelArg(kernel, 29, sizeof(cl_mem), &sad8x32RBuffer);
    errNum |= clSetKernelArg(kernel, 30, sizeof(cl_mem), &sad24x32LBuffer);
    errNum |= clSetKernelArg(kernel, 31, sizeof(cl_mem), &sad24x32RBuffer);
    errNum |= clSetKernelArg(kernel, 32, sizeof(cl_mem), &sad64x64Buffer);
    errNum |= clSetKernelArg(kernel, 33, sizeof(cl_mem), &sad64x32Buffer);
    errNum |= clSetKernelArg(kernel, 34, sizeof(cl_mem), &sad32x64Buffer);
    errNum |= clSetKernelArg(kernel, 35, sizeof(cl_mem), &sad64x16UBuffer);
    errNum |= clSetKernelArg(kernel, 36, sizeof(cl_mem), &sad64x16DBuffer);
    errNum |= clSetKernelArg(kernel, 37, sizeof(cl_mem), &sad64x48UBuffer);
    errNum |= clSetKernelArg(kernel, 38, sizeof(cl_mem), &sad64x48DBuffer);
    errNum |= clSetKernelArg(kernel, 39, sizeof(cl_mem), &sad16x64LBuffer);
    errNum |= clSetKernelArg(kernel, 40, sizeof(cl_mem), &sad16x64RBuffer);
    errNum |= clSetKernelArg(kernel, 41, sizeof(cl_mem), &sad48x64LBuffer);
    errNum |= clSetKernelArg(kernel, 42, sizeof(cl_mem), &sad48x64RBuffer);
    checkErr(errNum, "clSetKernelArg");
    
    
    
    
//------------------------------------------------------------------------------------------------------------------------
    
    //Define dimensions and numbers of work-items, work-groups and work-items in each work-group
//-----------------------------------------------------------------------------------------------------------------------
    const size_t globalWorkSize[2] = { 16, 16384 };
    const size_t localWorkSize[2]  = { 16, 16 };
//--------------------------------------------------------------------------------------------------------------------------
  
    // Queue the kernel up for execution across the array
    errNum = clEnqueueNDRangeKernel(queue, kernel, 2, NULL, globalWorkSize, localWorkSize, 0, NULL, NULL);
    checkErr(errNum, "clEnqueueNDRangeKernel - Kernel 1");
    
        
    //Read from Buffers to Results Arrays
//-------------------------------------------------------------------------------------------------------------------------    
     
    errNum = clEnqueueReadBuffer(queue, sad8x8Buffer, CL_TRUE, 0, sizeof(cl_uint) * 64, sad8x8, 0, NULL, NULL);
    checkErr(errNum, "clEnqueueReadBuffer - Buffer sad8x8");
    
    errNum = clEnqueueReadBuffer(queue, sad8x4Buffer, CL_TRUE, 0, sizeof(cl_uint) * 128, sad8x4, 0, NULL, NULL);
    checkErr(errNum, "clEnqueueReadBuffer - Buffer sad8x4");
    
    errNum = clEnqueueReadBuffer(queue, sad4x8Buffer, CL_TRUE, 0, sizeof(cl_uint) * 128, sad4x8, 0, NULL, NULL);
    checkErr(errNum, "clEnqueueReadBuffer - Buffer sad4x8");
    
    errNum = clEnqueueReadBuffer(queue, sad16x16Buffer, CL_TRUE, 0, sizeof(cl_uint) * 16, sad16x16, 0, NULL, NULL);
    checkErr(errNum, "clEnqueueReadBuffer - Buffer sad16x16");
    
    errNum = clEnqueueReadBuffer(queue, sad16x8Buffer, CL_TRUE, 0, sizeof(cl_uint) * 32, sad16x8, 0, NULL, NULL);
    checkErr(errNum, "clEnqueueReadBuffer - Buffer sad16x8");
    
    errNum = clEnqueueReadBuffer(queue, sad8x16Buffer, CL_TRUE, 0, sizeof(cl_uint) * 32, sad8x16, 0, NULL, NULL);
    checkErr(errNum, "clEnqueueReadBuffer - Buffer sad8x16");
    
    errNum = clEnqueueReadBuffer(queue, sad16x4UBuffer, CL_TRUE, 0, sizeof(cl_uint) * 16, sad16x4U, 0, NULL, NULL);
    checkErr(errNum, "clEnqueueReadBuffer - Buffer sad16x4U");
    
    errNum = clEnqueueReadBuffer(queue, sad16x4DBuffer, CL_TRUE, 0, sizeof(cl_uint) * 16, sad16x4D, 0, NULL, NULL);
    checkErr(errNum, "clEnqueueReadBuffer - Buffer sad16x4D");
    
    errNum = clEnqueueReadBuffer(queue, sad16x12UBuffer, CL_TRUE, 0, sizeof(cl_uint) * 16, sad16x12U, 0, NULL, NULL);
    checkErr(errNum, "clEnqueueReadBuffer - Buffer sad16x12U");
    
    errNum = clEnqueueReadBuffer(queue, sad16x12DBuffer, CL_TRUE, 0, sizeof(cl_uint) * 16, sad16x12D, 0, NULL, NULL);
    checkErr(errNum, "clEnqueueReadBuffer - Buffer sad16x12D");
    
    errNum = clEnqueueReadBuffer(queue, sad4x16LBuffer, CL_TRUE, 0, sizeof(cl_uint) * 16, sad4x16L, 0, NULL, NULL);
    checkErr(errNum, "clEnqueueReadBuffer - Buffer sad4x16L");
    
    errNum = clEnqueueReadBuffer(queue, sad4x16RBuffer, CL_TRUE, 0, sizeof(cl_uint) * 16, sad4x16R, 0, NULL, NULL);
    checkErr(errNum, "clEnqueueReadBuffer - Buffer sad64x64");
    
     errNum = clEnqueueReadBuffer(queue, sad12x16LBuffer, CL_TRUE, 0, sizeof(cl_uint) * 16, sad12x16L, 0, NULL, NULL);
    checkErr(errNum, "clEnqueueReadBuffer - Buffer sad12x16L");
    
    errNum = clEnqueueReadBuffer(queue, sad12x16RBuffer, CL_TRUE, 0, sizeof(cl_uint) * 16, sad12x16R, 0, NULL, NULL);
    checkErr(errNum, "clEnqueueReadBuffer - Buffer sad12x16R");
    
    errNum = clEnqueueReadBuffer(queue, sad32x32Buffer, CL_TRUE, 0, sizeof(cl_uint) * 4, sad32x32, 0, NULL, NULL);
    checkErr(errNum, "clEnqueueReadBuffer - Buffer sad32x32");
    
    errNum = clEnqueueReadBuffer(queue, sad32x16Buffer, CL_TRUE, 0, sizeof(cl_uint) * 8, sad32x16, 0, NULL, NULL);
    checkErr(errNum, "clEnqueueReadBuffer - Buffer sad32x16");
    
    errNum = clEnqueueReadBuffer(queue, sad16x32Buffer, CL_TRUE, 0, sizeof(cl_uint) * 8, sad16x32, 0, NULL, NULL);
    checkErr(errNum, "clEnqueueReadBuffer - Buffer sad16x32");
    
    errNum = clEnqueueReadBuffer(queue, sad32x8UBuffer, CL_TRUE, 0, sizeof(cl_uint) * 4, sad32x8U, 0, NULL, NULL);
    checkErr(errNum, "clEnqueueReadBuffer - Buffer sad32x8U");
    
    errNum = clEnqueueReadBuffer(queue, sad32x8DBuffer, CL_TRUE, 0, sizeof(cl_uint) * 4, sad32x8D, 0, NULL, NULL);
    checkErr(errNum, "clEnqueueReadBuffer - Buffer sad32x8D");
    
    errNum = clEnqueueReadBuffer(queue, sad32x24UBuffer, CL_TRUE, 0, sizeof(cl_uint) * 4, sad32x24U, 0, NULL, NULL);
    checkErr(errNum, "clEnqueueReadBuffer - Buffer sad32x24U");
    
    errNum = clEnqueueReadBuffer(queue, sad32x24DBuffer, CL_TRUE, 0, sizeof(cl_uint) * 4, sad32x24D, 0, NULL, NULL);
    checkErr(errNum, "clEnqueueReadBuffer - Buffer sad32x24D");
    
    errNum = clEnqueueReadBuffer(queue, sad8x32LBuffer, CL_TRUE, 0, sizeof(cl_uint) * 4, sad8x32L, 0, NULL, NULL);
    checkErr(errNum, "clEnqueueReadBuffer - Buffer sad8x32L");
    
    errNum = clEnqueueReadBuffer(queue, sad8x32RBuffer, CL_TRUE, 0, sizeof(cl_uint) * 4, sad8x32R, 0, NULL, NULL);
    checkErr(errNum, "clEnqueueReadBuffer - Buffer sad8x32R");
    
    errNum = clEnqueueReadBuffer(queue, sad24x32LBuffer, CL_TRUE, 0, sizeof(cl_uint)  * 4, sad24x32L, 0, NULL, NULL);
    checkErr(errNum, "clEnqueueReadBuffer - Buffer sad34x32L");
    
     errNum = clEnqueueReadBuffer(queue, sad24x32RBuffer, CL_TRUE, 0, sizeof(cl_uint) * 4, sad24x32R, 0, NULL, NULL);
    checkErr(errNum, "clEnqueueReadBuffer - Buffer sad24x32R");
    
    errNum = clEnqueueReadBuffer(queue, sad64x64Buffer, CL_TRUE, 0, sizeof(cl_uint), sad64x64, 0, NULL, NULL);
    checkErr(errNum, "clEnqueueReadBuffer - Buffer sad64x64");
    
    errNum = clEnqueueReadBuffer(queue, sad64x32Buffer, CL_TRUE, 0, sizeof(cl_uint) * 2, sad64x32, 0, NULL, NULL);
    checkErr(errNum, "clEnqueueReadBuffer - Buffer sad64x32");
    
    errNum = clEnqueueReadBuffer(queue, sad32x64Buffer, CL_TRUE, 0, sizeof(cl_uint) * 2, sad32x64, 0, NULL, NULL);
    checkErr(errNum, "clEnqueueReadBuffer - Buffer sad32x64");
    
    errNum = clEnqueueReadBuffer(queue, sad64x16UBuffer, CL_TRUE, 0, sizeof(cl_uint), sad64x16U, 0, NULL, NULL);
    checkErr(errNum, "clEnqueueReadBuffer - Buffer sad64x16U");
    
    errNum = clEnqueueReadBuffer(queue, sad64x16DBuffer, CL_TRUE, 0, sizeof(cl_uint), sad64x16D, 0, NULL, NULL);
    checkErr(errNum, "clEnqueueReadBuffer - Buffer sad64x16D");
    
    errNum = clEnqueueReadBuffer(queue, sad64x48UBuffer, CL_TRUE, 0, sizeof(cl_uint), sad64x48U, 0, NULL, NULL);
    checkErr(errNum, "clEnqueueReadBuffer - Buffer sad64x48U");
    
    errNum = clEnqueueReadBuffer(queue, sad64x48DBuffer, CL_TRUE, 0, sizeof(cl_uint), sad64x48D, 0, NULL, NULL);
    checkErr(errNum, "clEnqueueReadBuffer - Buffer sad64x48D");
    
    errNum = clEnqueueReadBuffer(queue, sad16x64LBuffer, CL_TRUE, 0, sizeof(cl_uint), sad16x64L, 0, NULL, NULL);
    checkErr(errNum, "clEnqueueReadBuffer - Buffer sad16x64L");
    
    errNum = clEnqueueReadBuffer(queue, sad16x64RBuffer, CL_TRUE, 0, sizeof(cl_uint), sad16x64R, 0, NULL, NULL);
    checkErr(errNum, "clEnqueueReadBuffer - Buffer sad16x64R");
    
    errNum = clEnqueueReadBuffer(queue, sad48x64LBuffer, CL_TRUE, 0, sizeof(cl_uint), sad48x64L, 0, NULL, NULL);
    checkErr(errNum, "clEnqueueReadBuffer - Buffer sad48x64L");
    
    errNum = clEnqueueReadBuffer(queue, sad48x64RBuffer, CL_TRUE, 0, sizeof(cl_uint), sad48x64R, 0, NULL, NULL);
    checkErr(errNum, "clEnqueueReadBuffer - Buffer sad48x64R");
    
    errNum = clFlush(queue);
    checkErr(errNum, "clFlush");
    errNum = clReleaseMemObject(sad8x8Buffer); 
    checkErr(errNum, "clReleaseBuffer");
    
    errNum = clReleaseMemObject(sad8x4Buffer); 
    checkErr(errNum, "clReleaseBuffer");
    
    errNum = clReleaseMemObject(sad4x8Buffer); 
    checkErr(errNum, "clReleaseBuffer" );             
    
    errNum = clReleaseMemObject(sad16x16Buffer); 
    checkErr(errNum, "clReleaseBuffer");
    
    errNum = clReleaseMemObject(sad16x8Buffer); 
    checkErr(errNum, "clReleaseBuffer");
    
    errNum = clReleaseMemObject(sad8x16Buffer); 
    checkErr(errNum, "clReleaseBuffer");
    
    errNum = clReleaseMemObject(sad16x4UBuffer); 
    checkErr(errNum, "clReleaseBuffer");
    
    errNum = clReleaseMemObject(sad16x4DBuffer); 
    checkErr(errNum, "clReleaseBuffer");
    
    errNum = clReleaseMemObject(sad16x12UBuffer); 
    checkErr(errNum, "clReleaseBuffer");
    
    errNum = clReleaseMemObject(sad16x12DBuffer); 
    checkErr(errNum, "clReleaseBuffer");
    
    errNum = clReleaseMemObject(sad4x16LBuffer); 
    checkErr(errNum, "clReleaseBuffer");     
    
    errNum = clReleaseMemObject(sad4x16RBuffer); 
    checkErr(errNum, "clReleaseBuffer");
    
    errNum = clReleaseMemObject(sad12x16LBuffer); 
    checkErr(errNum, "clReleaseBuffer");
    
    errNum = clReleaseMemObject(sad12x16RBuffer); 
    checkErr(errNum, "clReleaseBuffer");
    
    errNum = clReleaseMemObject(sad32x32Buffer); 
    checkErr(errNum, "clReleaseBuffer");
    
    errNum = clReleaseMemObject(sad32x16Buffer); 
    checkErr(errNum, "clReleaseBuffer");
    
    errNum = clReleaseMemObject(sad16x32Buffer); 
    checkErr(errNum, "clReleaseBuffer");
    
    errNum = clReleaseMemObject(sad32x8UBuffer); 
    checkErr(errNum, "clReleaseBuffer");
    
    errNum = clReleaseMemObject(sad32x8DBuffer); 
    checkErr(errNum, "clReleaseBuffer");
    
    errNum = clReleaseMemObject(sad32x24UBuffer); 
    checkErr(errNum, "clReleaseBuffer");
    
    errNum = clReleaseMemObject(sad32x24DBuffer); 
    checkErr(errNum, "clReleaseBuffer");
    
    errNum = clReleaseMemObject(sad8x32LBuffer); 
    checkErr(errNum, "clReleaseBuffer");
    
    errNum = clReleaseMemObject(sad8x32RBuffer); 
    checkErr(errNum, "clReleaseBuffer");
    
    errNum = clReleaseMemObject(sad24x32LBuffer); 
    checkErr(errNum, "clReleaseBuffer");
    
    errNum = clReleaseMemObject(sad24x32RBuffer); 
    checkErr(errNum, "clReleaseBuffer");
    
    errNum = clReleaseMemObject(sad64x64Buffer); 
    checkErr(errNum, "clReleaseBuffer");
    
    errNum = clReleaseMemObject(sad64x32Buffer); 
    checkErr(errNum, "clReleaseBuffer");
    
    errNum = clReleaseMemObject(sad32x64Buffer); 
    checkErr(errNum, "clReleaseBuffer");
    
    errNum = clReleaseMemObject(sad64x16UBuffer); 
    checkErr(errNum, "clReleaseBuffer");
    
    errNum = clReleaseMemObject(sad64x16DBuffer); 
    checkErr(errNum, "clReleaseBuffer");
    
    errNum = clReleaseMemObject(sad64x48UBuffer); 
    checkErr(errNum, "clReleaseBuffer");
    
    errNum = clReleaseMemObject(sad64x48DBuffer); 
    checkErr(errNum, "clReleaseBuffer");
    
    errNum = clReleaseMemObject(sad16x64LBuffer); 
    checkErr(errNum, "clReleaseBuffer");
    
    errNum = clReleaseMemObject(sad16x64RBuffer); 
    checkErr(errNum, "clReleaseBuffer");
    
    errNum = clReleaseMemObject(sad48x64LBuffer); 
    checkErr(errNum, "clReleaseBuffer");
    
    errNum = clReleaseMemObject(sad48x64RBuffer); 
    checkErr(errNum, "clReleaseBuffer");
    
    showResults(sad8x8 , "sad8x8", sizeof(sad8x8)/sizeof(sad8x8[0]));
    showResults(sad8x4 , "sad8x4", sizeof(sad8x4)/sizeof(sad8x4[0]));
    showResults(sad4x8 , "sad4x8", sizeof(sad4x8)/sizeof(sad4x8[0]));
    showResults(sad16x4U , "sad16x4U", sizeof(sad16x4U)/sizeof(sad16x4U[0]));
    showResults(sad16x4D , "sad16x4D", sizeof(sad16x4D)/sizeof(sad16x4D[0]));
    showResults(sad16x12U , "sad16x12U", sizeof(sad16x12U)/sizeof(sad16x12U[0]));
    showResults(sad16x12D , "sad16x12D", sizeof(sad16x12D)/sizeof(sad16x12D[0]));
    showResults(sad4x16L, "sad4x16L", sizeof(sad4x16L)/sizeof(sad4x16L[0]));
    showResults(sad4x16R, "sad4x16R", sizeof(sad4x16R)/sizeof(sad4x16R[0]));
    showResults(sad12x16L, "sad12x16L", sizeof(sad12x16L)/sizeof(sad12x16L[0]));
    showResults(sad12x16R, "sad12x16R", sizeof(sad12x16R)/sizeof(sad12x16R[0]));
    showResults(sad16x16, "sad16x16", sizeof(sad16x16)/sizeof(sad16x16[0]));
    showResults(sad16x8, "sad16x8", sizeof(sad16x8)/sizeof(sad16x8[0]));  
    showResults(sad8x16, "sad8x16", sizeof(sad8x16)/sizeof(sad8x16[0]));
    showResults(sad32x8U , "sad32x8U", sizeof(sad32x8U)/sizeof(sad32x8U[0]));
    showResults(sad32x8D , "sad32x8D", sizeof(sad32x8D)/sizeof(sad32x8D[0]));
    showResults(sad32x24U , "sad32x24U", sizeof(sad32x24U)/sizeof(sad32x24U[0]));
    showResults(sad32x24D , "sad32x24D", sizeof(sad32x24D)/sizeof(sad32x24D[0]));
    showResults(sad8x32L , "sad8x32L", sizeof(sad8x32L)/sizeof(sad8x32L[0]));
    showResults(sad8x32R , "sad8x32R", sizeof(sad8x32R)/sizeof(sad8x32R[0]));
    showResults(sad24x32L , "sad24x32L", sizeof(sad24x32L)/sizeof(sad24x32L[0]));
    showResults(sad24x32R , "sad24x32R", sizeof(sad24x32R)/sizeof(sad24x32R[0]));
    showResults(sad32x32 , "sad32x32", sizeof(sad32x32)/sizeof(sad32x32[0]));
    showResults(sad64x32 , "sad64x32", sizeof(sad64x32)/sizeof(sad64x32[0]));
    showResults(sad32x64 , "sad32x64", sizeof(sad32x64)/sizeof(sad32x64[0]));
    showResults(sad16x32 , "sad16x32", sizeof(sad16x32)/sizeof(sad16x32[0]));
    showResults(sad32x16 , "sad32x16", sizeof(sad32x16)/sizeof(sad32x16[0]));
    showResults(sad64x16U, "sad64x16U", sizeof(sad64x16U)/sizeof(sad64x16U[0]));
    showResults(sad64x16D, "sad64x16D", sizeof(sad64x16D)/sizeof(sad64x16D[0]));
    showResults(sad64x48U, "sad64x48U", sizeof(sad64x48U)/sizeof(sad64x48U[0]));
    showResults(sad64x48D, "sad64x48D", sizeof(sad64x48D)/sizeof(sad64x48D[0]));
    showResults(sad16x64L, "sad16x64L", sizeof(sad16x64L)/sizeof(sad16x64L[0]));
    showResults(sad16x64R, "sad16x64R", sizeof(sad16x64R)/sizeof(sad16x64R[0]));
    showResults(sad48x64L, "sad48x64L", sizeof(sad48x64L)/sizeof(sad48x64L[0]));
    showResults(sad48x64R, "sad48x64R", sizeof(sad48x64R)/sizeof(sad48x64R[0]));
    showResults(sad64x64 , "sad64x64", sizeof(sad64x64)/sizeof(sad64x64[0]));
}
